import com.github.mustachejava.DefaultMustacheFactory
import oracle.jdbc.driver.OracleDriver
import org.apache.ibatis.jdbc.ScriptRunner

import java.sql.Connection


buildscript {
    dependencies {
        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.41'
        classpath 'org.mybatis:mybatis:3.5.3'
        classpath 'com.github.spullara.mustache.java:compiler:0.9.6'
        classpath files("jar/ojdbc8.jar")
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'org.jetbrains.kotlin.jvm' version '1.3.41'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.41'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

ext{
    databaseOwnerUser = "sys"
    databaseOwnerPassword = "master"
    databaseUrl = 'jdbc:oracle:thin:@localhost:1521:orcl'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.payroll'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
    mavenCentral()
}

dependencies {
    implementation files('jar/ojdbc8.jar')
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.1.1'
    implementation 'com.github.spullara.mustache.java:compiler:0.8.18'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0'
    testImplementation 'org.dbunit:dbunit:2.6.0'
    testImplementation 'com.github.springtestdbunit:spring-test-dbunit:1.3.0'
}

test {
    useJUnitPlatform()
}

task("schema-clear") {
    doLast {
        getConnection().withCloseable { connection ->
            def deleteTableSQL = retrieveResultSetAsString(connection, generateSQL("ddl/refresh/schema-clear.template", [object_type: "TABLE"]))
            def deleteSequenceSQL = retrieveResultSetAsString(connection, generateSQL("ddl/refresh/schema-clear.template", [object_type: "SEQUENCE"]))
            def deleteViewSQL = retrieveResultSetAsString(connection, generateSQL("ddl/refresh/schema-clear.template", [object_type: "VIEW"]))

            def stmt = connection.createStatement()
            (deleteTableSQL + deleteSequenceSQL + deleteViewSQL).forEach { sql ->
                try {
                    println sql
                    stmt.execute(sql)
                } catch (Exception e) {
                    throw new GradleScriptException("failed schema-clear", e)
                }
            }
        }
    }
}

static List<String> retrieveResultSetAsString(Connection connection, String deleteSQL) {
    List<String> result = []
    def stmt = connection.createStatement()
    def rs = stmt.executeQuery(deleteSQL)
    while (rs.next()) {
        result.add(rs.getString(1))
    }
    return result
}

private static String generateSQL(String templatePath, Object parameter) {
    def mustacheFactory
    mustacheFactory = new DefaultMustacheFactory()
    def mustache = mustacheFactory.compile(templatePath)
    def stringWriter = new StringWriter()
    mustache.execute(stringWriter, parameter).flush()
    def deleteSQL = stringWriter.toString()
    return deleteSQL
}

task("schema-import") {
    dependsOn(tasks.findByName("schema-clear"))
    doLast {
        getConnection().withCloseable { connection ->
            try {
                fileTree(dir: 'ddl', includes: ['**/*.sql']).sort().forEach { ddlFile -> runScript(connection, ddlFile.text) }
            } catch (Exception e) {
                throw new GradleScriptException("failed schema-import", e)
            }
        }
    }
}

static void runScript(Connection connection, String script) {
    def runner = new ScriptRunner(connection)
    runner.setDelimiter("/")
    runner.setLogWriter(new PrintWriter(System.out))
    runner.setErrorLogWriter(new PrintWriter(System.out))
    runner.runScript(new StringReader(script))
}

Connection getConnection() {
    def driver = new OracleDriver()
    def properties = new Properties()
    properties.setProperty("user", databaseUser as String)
    properties.setProperty("password", databasePassword as String)
    return driver.connect(databaseUrl, properties)
}